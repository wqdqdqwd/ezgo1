{
  "rules": {
    // Kullanıcı verileri - sadece kendi verilerine erişim
    "users": {
      "$uid": {
        ".read": "auth != null && (auth.uid == $uid || root.child('users').child(auth.uid).child('role').val() == 'admin')",
        ".write": "auth != null && (auth.uid == $uid || root.child('users').child(auth.uid).child('role').val() == 'admin')",
        ".validate": "newData.hasChildren(['email', 'full_name', 'created_at'])",
        
        // Email validation
        "email": {
          ".validate": "newData.isString() && newData.val().matches(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/)"
        },
        
        // Full name validation
        "full_name": {
          ".validate": "newData.isString() && newData.val().length >= 2 && newData.val().length <= 100"
        },
        
        // Subscription status validation
        "subscription_status": {
          ".validate": "newData.isString() && (newData.val() == 'trial' || newData.val() == 'active' || newData.val() == 'expired')"
        },
        
        // Role validation - sadece admin değiştirebilir
        "role": {
          ".write": "root.child('users').child(auth.uid).child('role').val() == 'admin'"
        },
        
        // API keys - sadece kullanıcı kendisi yazabilir
        "api_keys": {
          ".read": "auth.uid == $uid",
          ".write": "auth.uid == $uid"
        },
        
        // Encrypted API data
        "binance_api_key": {
          ".read": "auth.uid == $uid",
          ".write": "auth.uid == $uid"
        },
        
        "binance_api_secret": {
          ".read": "auth.uid == $uid", 
          ".write": "auth.uid == $uid"
        },
        
        // Bot settings
        "bot_settings": {
          ".read": "auth.uid == $uid",
          ".write": "auth.uid == $uid"
        },
        
        // Trading stats - kullanıcı okuyabilir, sistem yazabilir
        "total_trades": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        
        "total_pnl": {
          ".validate": "newData.isNumber()"
        },
        
        "account_balance": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        
        // Timestamps
        "created_at": {
          ".validate": "newData.isNumber()"
        },
        
        "last_login": {
          ".validate": "newData.isNumber()"
        },
        
        "subscription_expiry": {
          ".validate": "newData.isString()"
        }
      }
    },
    
    // Trading verileri - kullanıcı kendi verilerini okuyabilir, admin hepsini
    "trades": {
      "$tradeId": {
        ".read": "auth != null && (data.child('user_id').val() == auth.uid || root.child('users').child(auth.uid).child('role').val() == 'admin')",
        ".write": "auth != null && (data.child('user_id').val() == auth.uid || root.child('users').child(auth.uid).child('role').val() == 'admin')",
        ".validate": "newData.hasChildren(['user_id', 'symbol', 'timestamp'])",
        
        "user_id": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        
        "symbol": {
          ".validate": "newData.isString() && newData.val().matches(/^[A-Z]{3,10}USDT$/)"
        },
        
        "side": {
          ".validate": "newData.isString() && (newData.val() == 'LONG' || newData.val() == 'SHORT' || newData.val() == 'BUY' || newData.val() == 'SELL')"
        },
        
        "quantity": {
          ".validate": "newData.isNumber() && newData.val() > 0"
        },
        
        "price": {
          ".validate": "newData.isNumber() && newData.val() > 0"
        },
        
        "pnl": {
          ".validate": "newData.isNumber()"
        },
        
        "status": {
          ".validate": "newData.isString() && (newData.val() == 'OPENED' || newData.val() == 'CLOSED' || newData.val() == 'CLOSED_BY_FLIP' || newData.val() == 'FAILED')"
        }
      }
    },
    
    // Ödeme bildirimleri - kullanıcı kendi bildirimini, admin hepsini görebilir
    "payment_notifications": {
      "$paymentId": {
        ".read": "auth != null && (data.child('user_id').val() == auth.uid || root.child('users').child(auth.uid).child('role').val() == 'admin')",
        ".write": "auth != null && (data.child('user_id').val() == auth.uid || root.child('users').child(auth.uid).child('role').val() == 'admin')",
        ".validate": "newData.hasChildren(['user_id', 'user_email', 'transaction_hash', 'amount'])",
        
        "user_id": {
          ".validate": "newData.isString() && newData.val() == auth.uid"
        },
        
        "user_email": {
          ".validate": "newData.isString() && newData.val().matches(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/)"
        },
        
        "transaction_hash": {
          ".validate": "newData.isString() && newData.val().length >= 10"
        },
        
        "amount": {
          ".validate": "newData.isNumber() && newData.val() > 0"
        },
        
        "currency": {
          ".validate": "newData.isString() && newData.val() == 'USDT'"
        },
        
        "network": {
          ".validate": "newData.isString() && newData.val() == 'TRC20'"
        },
        
        "status": {
          ".validate": "newData.isString() && (newData.val() == 'pending' || newData.val() == 'approved' || newData.val() == 'rejected')",
          ".write": "root.child('users').child(auth.uid).child('role').val() == 'admin' || (data.val() == 'pending' && newData.val() == 'pending')"
        },
        
        // Admin approval fields
        "approved_by": {
          ".write": "root.child('users').child(auth.uid).child('role').val() == 'admin'"
        },
        
        "rejected_by": {
          ".write": "root.child('users').child(auth.uid).child('role').val() == 'admin'"
        },
        
        "rejection_reason": {
          ".write": "root.child('users').child(auth.uid).child('role').val() == 'admin'"
        }
      }
    },
    
    // Destek mesajları - kullanıcı kendi mesajını, admin hepsini görebilir
    "support_messages": {
      "$messageId": {
        ".read": "auth != null && (data.child('user_id').val() == auth.uid || root.child('users').child(auth.uid).child('role').val() == 'admin')",
        ".write": "auth != null && (data.child('user_id').val() == auth.uid || root.child('users').child(auth.uid).child('role').val() == 'admin')",
        ".validate": "newData.hasChildren(['user_id', 'user_email', 'message'])",
        
        "user_id": {
          ".validate": "newData.isString() && newData.val() == auth.uid"
        },
        
        "user_email": {
          ".validate": "newData.isString() && newData.val().matches(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/)"
        },
        
        "subject": {
          ".validate": "newData.isString() && newData.val().length >= 1 && newData.val().length <= 200"
        },
        
        "message": {
          ".validate": "newData.isString() && newData.val().length >= 10 && newData.val().length <= 2000"
        },
        
        "status": {
          ".validate": "newData.isString() && (newData.val() == 'open' || newData.val() == 'resolved')",
          ".write": "root.child('users').child(auth.uid).child('role').val() == 'admin' || (data.val() == null && newData.val() == 'open')"
        },
        
        // Admin response fields
        "resolved_by": {
          ".write": "root.child('users').child(auth.uid).child('role').val() == 'admin'"
        },
        
        "admin_response": {
          ".write": "root.child('users').child(auth.uid).child('role').val() == 'admin'"
        }
      }
    },
    
    // Bot durumları - gerçek zamanlı bot status tracking
    "bot_status": {
      "$uid": {
        ".read": "auth != null && (auth.uid == $uid || root.child('users').child(auth.uid).child('role').val() == 'admin')",
        ".write": "auth != null && auth.uid == $uid",
        
        "is_running": {
          ".validate": "newData.isBoolean()"
        },
        
        "symbol": {
          ".validate": "newData.isString() && newData.val().matches(/^[A-Z]{3,10}USDT$/)"
        },
        
        "position_side": {
          ".validate": "newData.isString() && (newData.val() == 'LONG' || newData.val() == 'SHORT' || newData.val() == null)"
        },
        
        "account_balance": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        
        "position_pnl": {
          ".validate": "newData.isNumber()"
        }
      }
    },
    
    // Sistem logları - sadece admin erişimi
    "system_logs": {
      ".read": "auth != null && root.child('users').child(auth.uid).child('role').val() == 'admin'",
      ".write": "auth != null && root.child('users').child(auth.uid).child('role').val() == 'admin'"
    },
    
    // Admin istatistikleri
    "admin_stats": {
      ".read": "auth != null && root.child('users').child(auth.uid).child('role').val() == 'admin'",
      ".write": "auth != null && root.child('users').child(auth.uid).child('role').val() == 'admin'"
    },
    
    // Genel kurallar
    ".read": false,
    ".write": false
  }
}