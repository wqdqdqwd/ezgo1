{
  "rules": {
    "users": {
      ".read": "auth != null && auth.token.admin == true",
      ".write": "auth != null && auth.token.admin == true",
      "$uid": {
        ".read": "auth != null && (auth.uid == $uid || auth.token.admin == true)",
        ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)",
        ".validate": "newData.hasChildren(['email', 'full_name']) || auth.token.admin == true",
        
        "email": {
          ".validate": "newData.isString() && newData.val().matches(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/) || auth.token.admin == true"
        },
        
        "full_name": {
          ".validate": "newData.isString() && newData.val().length >= 2 && newData.val().length <= 100 || auth.token.admin == true"
        },
        
        "subscription_status": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)",
          ".validate": "newData.isString() && (newData.val() == 'trial' || newData.val() == 'active' || newData.val() == 'expired') || auth.token.admin == true"
        },
        
        "subscription_expiry": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)",
          ".validate": "newData.isString() || newData.isNumber() || auth.token.admin == true"
        },
        
        "subscription_start": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "created_at": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "last_login": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "last_login_ip": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "registration_ip": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "is_active": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "settings": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "subscription_extended_by": {
          ".write": "auth != null && auth.token.admin == true"
        },
        
        "subscription_extended_at": {
          ".write": "auth != null && auth.token.admin == true"
        },
        
        "subscription_extended_days": {
          ".write": "auth != null && auth.token.admin == true"
        },
        
        "manual_extension_by": {
          ".write": "auth != null && auth.token.admin == true"
        },
        
        "manual_extension_at": {
          ".write": "auth != null && auth.token.admin == true"
        },
        
        "manual_extension_days": {
          ".write": "auth != null && auth.token.admin == true"
        },
        
        "manual_extension_note": {
          ".write": "auth != null && auth.token.admin == true"
        },
        
        "payment_approved_by": {
          ".write": "auth != null && auth.token.admin == true"
        },
        
        "payment_approved_at": {
          ".write": "auth != null && auth.token.admin == true"
        },
        
        "payment_approved_days": {
          ".write": "auth != null && auth.token.admin == true"
        },
        
        "bulk_action_by": {
          ".write": "auth != null && auth.token.admin == true"
        },
        
        "bulk_action_at": {
          ".write": "auth != null && auth.token.admin == true"
        },
        
        "bulk_action_type": {
          ".write": "auth != null && auth.token.admin == true"
        },
        
        "bulk_action_days": {
          ".write": "auth != null && auth.token.admin == true"
        },
        
        "role": {
          ".write": "auth.token.admin == true"
        },
        
        "admin_set_at": {
          ".write": "auth.token.admin == true"
        },
        
        "binance_api_key": {
          ".read": "auth.uid == $uid || auth.token.admin == true",
          ".write": "auth.uid == $uid || auth.token.admin == true"
        },
        
        "binance_api_secret": {
          ".read": "auth.uid == $uid || auth.token.admin == true", 
          ".write": "auth.uid == $uid || auth.token.admin == true"
        },
        
        "api_keys_set": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "api_testnet": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "api_connection_verified": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "api_updated_at": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "api_last_test": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "bot_settings": {
          ".read": "auth.uid == $uid || auth.token.admin == true",
          ".write": "auth.uid == $uid || auth.token.admin == true"
        },
        
        "bot_active": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "bot_start_time": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "bot_stop_time": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "bot_symbols": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "bot_status": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "bot_status_message": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "bot_last_signal": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "last_bot_update": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "total_trades": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)",
          ".validate": "newData.isNumber() && newData.val() >= 0 || auth.token.admin == true"
        },
        
        "total_pnl": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)",
          ".validate": "newData.isNumber() || auth.token.admin == true"
        },
        
        "win_rate": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)",
          ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 100 || auth.token.admin == true"
        },
        
        "account_balance": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)",
          ".validate": "newData.isNumber() && newData.val() >= 0 || auth.token.admin == true"
        },
        
        "last_trade_time": {
          ".write": "auth != null && (auth.uid == $uid || auth.token.admin == true)"
        },
        
        "last_updated": {
          ".write": "auth != null && auth.token.admin == true"
        },
        
        "updated_by": {
          ".write": "auth != null && auth.token.admin == true"
        }
      }
    },
    
    "trades": {
      ".read": "auth != null && auth.token.admin == true",
      ".write": "auth != null",
      "$tradeId": {
        ".read": "auth != null && (data.child('user_id').val() == auth.uid || auth.token.admin == true)",
        ".write": "auth != null && (data.child('user_id').val() == auth.uid || auth.token.admin == true || !data.exists())",
        ".validate": "newData.hasChildren(['user_id', 'symbol', 'timestamp']) || auth.token.admin == true",
        
        "user_id": {
          ".validate": "newData.isString() && newData.val().length > 0 || auth.token.admin == true"
        },
        
        "symbol": {
          ".validate": "newData.isString() && newData.val().matches(/^[A-Z]{3,10}USDT$/) || auth.token.admin == true"
        },
        
        "side": {
          ".validate": "newData.isString() && (newData.val() == 'LONG' || newData.val() == 'SHORT' || newData.val() == 'BUY' || newData.val() == 'SELL') || auth.token.admin == true"
        },
        
        "status": {
          ".validate": "newData.isString() || auth.token.admin == true"
        },
        
        "timestamp": {
          ".validate": "newData.isString() || auth.token.admin == true"
        },
        
        "pnl": {
          ".validate": "newData.isNumber() || auth.token.admin == true"
        }
      }
    },
    
    "payment_notifications": {
      ".read": "auth != null && auth.token.admin == true",
      ".write": "auth != null",
      "$paymentId": {
        ".read": "auth != null && (data.child('user_id').val() == auth.uid || auth.token.admin == true)",
        ".write": "auth != null && (data.child('user_id').val() == auth.uid || auth.token.admin == true || !data.exists())",
        ".validate": "newData.hasChildren(['user_id', 'user_email', 'transaction_hash', 'amount']) || auth.token.admin == true",
        
        "user_id": {
          ".validate": "newData.isString() && newData.val().length > 0 || auth.token.admin == true"
        },
        
        "user_email": {
          ".validate": "newData.isString() && newData.val().matches(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/) || auth.token.admin == true"
        },
        
        "transaction_hash": {
          ".validate": "newData.isString() && newData.val().length >= 10 || auth.token.admin == true"
        },
        
        "amount": {
          ".validate": "newData.isNumber() && newData.val() > 0 || auth.token.admin == true"
        },
        
        "status": {
          ".write": "auth.token.admin == true || (data.val() == null && newData.val() == 'pending')",
          ".validate": "newData.isString() && (newData.val() == 'pending' || newData.val() == 'approved' || newData.val() == 'rejected') || auth.token.admin == true"
        },
        
        "approved_by": {
          ".write": "auth.token.admin == true"
        },
        
        "approved_at": {
          ".write": "auth.token.admin == true"
        },
        
        "rejected_by": {
          ".write": "auth.token.admin == true"
        },
        
        "rejected_at": {
          ".write": "auth.token.admin == true"
        },
        
        "rejection_reason": {
          ".write": "auth.token.admin == true"
        },
        
        "created_at": {
          ".write": "auth != null && (data.child('user_id').val() == auth.uid || auth.token.admin == true || !data.exists())"
        }
      }
    },
    
    "support_messages": {
      ".read": "auth != null && auth.token.admin == true",
      ".write": "auth != null",
      "$messageId": {
        ".read": "auth != null && (data.child('user_id').val() == auth.uid || auth.token.admin == true)",
        ".write": "auth != null && (data.child('user_id').val() == auth.uid || auth.token.admin == true || !data.exists())",
        ".validate": "newData.hasChildren(['user_id', 'user_email', 'subject', 'message']) || auth.token.admin == true",
        
        "user_id": {
          ".validate": "newData.isString() && newData.val().length > 0 || auth.token.admin == true"
        },
        
        "user_email": {
          ".validate": "newData.isString() && newData.val().matches(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/) || auth.token.admin == true"
        },
        
        "subject": {
          ".validate": "newData.isString() && newData.val().length > 0 || auth.token.admin == true"
        },
        
        "message": {
          ".validate": "newData.isString() && newData.val().length > 0 || auth.token.admin == true"
        },
        
        "status": {
          ".write": "auth.token.admin == true || (data.val() == null && newData.val() == 'open')",
          ".validate": "newData.isString() && (newData.val() == 'open' || newData.val() == 'resolved') || auth.token.admin == true"
        },
        
        "resolved_by": {
          ".write": "auth.token.admin == true"
        },
        
        "resolved_at": {
          ".write": "auth.token.admin == true"
        },
        
        "created_at": {
          ".write": "auth != null && (data.child('user_id').val() == auth.uid || auth.token.admin == true || !data.exists())"
        }
      }
    }
  }
}