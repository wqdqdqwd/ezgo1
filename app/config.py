import os
from dotenv import load_dotenv

load_dotenv()

class Settings:
    # --- Temel Ayarlar ---
    API_KEY: str = os.getenv("BINANCE_API_KEY")
    API_SECRET: str = os.getenv("BINANCE_API_SECRET")
    ENVIRONMENT: str = os.getenv("ENVIRONMENT", "LIVE")
    BOT_USERNAME: str = os.getenv("BOT_USERNAME", "admin")
    BOT_PASSWORD: str = os.getenv("BOT_PASSWORD", "changeme123")
    
    # --- Firebase Ayarlarƒ± ---
    FIREBASE_CREDENTIALS_JSON: str = os.getenv("FIREBASE_CREDENTIALS_JSON")
    FIREBASE_DATABASE_URL: str = os.getenv("FIREBASE_DATABASE_URL")
    FIREBASE_WEB_API_KEY: str = os.getenv("FIREBASE_WEB_API_KEY")
    FIREBASE_WEB_AUTH_DOMAIN: str = os.getenv("FIREBASE_WEB_AUTH_DOMAIN")
    FIREBASE_WEB_PROJECT_ID: str = os.getenv("FIREBASE_WEB_PROJECT_ID")
    FIREBASE_WEB_STORAGE_BUCKET: str = os.getenv("FIREBASE_WEB_STORAGE_BUCKET")
    FIREBASE_WEB_MESSAGING_SENDER_ID: str = os.getenv("FIREBASE_WEB_MESSAGING_SENDER_ID")
    FIREBASE_WEB_APP_ID: str = os.getenv("FIREBASE_WEB_APP_ID")
    
    # --- G√ºvenlik Ayarlarƒ± ---
    ENCRYPTION_KEY: str = os.getenv("ENCRYPTION_KEY")
    ADMIN_EMAIL: str = os.getenv("ADMIN_EMAIL")
    
    # --- Uygulama Ayarlarƒ± ---
    LOG_LEVEL: str = os.getenv("LOG_LEVEL", "INFO")
    
    BASE_URL = "https://fapi.binance.com" if os.getenv("ENVIRONMENT", "TEST") == "LIVE" else "https://testnet.binancefuture.com"
    WEBSOCKET_URL = "wss://fstream.binance.com" if os.getenv("ENVIRONMENT", "TEST") == "LIVE" else "wss://stream.binancefuture.com"

    # --- ƒ∞≈ülem Parametreleri ---
    LEVERAGE: int = 10
    ORDER_SIZE_USDT: float = 35.0
    TIMEFRAME: str = "30m"
    
    # --- K√¢r/Zarar Ayarlarƒ± (Stop Loss ve Take Profit) ---
    # CRITICAL: Bu deƒüerler float olmalƒ±, callable deƒüil!
    STOP_LOSS_PERCENT: float = 0.008   # %0.8 Zarar Durdur
    TAKE_PROFIT_PERCENT: float = 0.01 # %1.2 Kar Al (optimize edilmi≈ü)
    
    # --- Rate Limiting ve Performance Ayarlarƒ± ---
    MAX_REQUESTS_PER_MINUTE: int = 1200
    CACHE_DURATION_BALANCE: int = 10
    CACHE_DURATION_POSITION: int = 5
    CACHE_DURATION_PNL: int = 3
    
    # --- WebSocket Ayarlarƒ± ---
    WEBSOCKET_PING_INTERVAL: int = 30
    WEBSOCKET_PING_TIMEOUT: int = 15
    WEBSOCKET_CLOSE_TIMEOUT: int = 10
    WEBSOCKET_MAX_RECONNECTS: int = 10
    
    # --- Status Update Intervals ---
    STATUS_UPDATE_INTERVAL: int = 10
    BALANCE_UPDATE_INTERVAL: int = 30

    @classmethod
    def validate_settings(cls):
        """Ayarlarƒ± doƒürula ve gerekirse uyar"""
        warnings = []
        
        if not cls.API_KEY or not cls.API_SECRET:
            warnings.append("‚ö†Ô∏è BINANCE_API_KEY veya BINANCE_API_SECRET ayarlanmamƒ±≈ü!")
        
        if cls.LEVERAGE < 1 or cls.LEVERAGE > 125:
            warnings.append(f"‚ö†Ô∏è Kaldƒ±ra√ß deƒüeri ge√ßersiz: {cls.LEVERAGE}. 1-125 arasƒ± olmalƒ±.")
        
        if cls.ORDER_SIZE_USDT < 5:
            warnings.append(f"‚ö†Ô∏è ƒ∞≈ülem miktarƒ± √ßok d√º≈ü√ºk: {cls.ORDER_SIZE_USDT}. Minimum 5 USDT √∂nerilir.")
        
        # Float kontrol√º ekle
        if not isinstance(cls.STOP_LOSS_PERCENT, (int, float)) or cls.STOP_LOSS_PERCENT <= 0 or cls.STOP_LOSS_PERCENT >= 1:
            warnings.append(f"‚ö†Ô∏è Stop Loss y√ºzdesi ge√ßersiz: {cls.STOP_LOSS_PERCENT}. 0-1 arasƒ± float olmalƒ±.")
        
        if not isinstance(cls.TAKE_PROFIT_PERCENT, (int, float)) or cls.TAKE_PROFIT_PERCENT <= 0 or cls.TAKE_PROFIT_PERCENT >= 1:
            warnings.append(f"‚ö†Ô∏è Take Profit y√ºzdesi ge√ßersiz: {cls.TAKE_PROFIT_PERCENT}. 0-1 arasƒ± float olmalƒ±.")
        
        # Rate limit kontrol√º
        if cls.MAX_REQUESTS_PER_MINUTE > 2000:
            warnings.append(f"‚ö†Ô∏è Dakikada maksimum istek sayƒ±sƒ± y√ºksek: {cls.MAX_REQUESTS_PER_MINUTE}. Rate limit riski!")
        
        for warning in warnings:
            print(warning)
        
        return len(warnings) == 0

    @classmethod
    def print_settings(cls):
        """Mevcut ayarlarƒ± yazdƒ±r"""
        print("=" * 60)
        print("üöÄ OPTIMIZE EDƒ∞LMƒ∞≈û BOT AYARLARI")
        print("=" * 60)
        print(f"üåê Ortam: {cls.ENVIRONMENT}")
        print(f"üí∞ ƒ∞≈ülem Miktarƒ±: {cls.ORDER_SIZE_USDT} USDT")
        print(f"üìà Kaldƒ±ra√ß: {cls.LEVERAGE}x")
        print(f"‚è∞ Zaman Dilimi: {cls.TIMEFRAME} ‚≠ê (Optimize)")
        print(f"üõë Stop Loss: %{cls.STOP_LOSS_PERCENT * 100:.1f}")
        print(f"üéØ Take Profit: %{cls.TAKE_PROFIT_PERCENT * 100:.1f}")
        print(f"üìà Risk/Reward Oranƒ±: 1:{cls.TAKE_PROFIT_PERCENT/cls.STOP_LOSS_PERCENT:.1f}")
        print(f"üîÑ Maks. ƒ∞stek/Dakika: {cls.MAX_REQUESTS_PER_MINUTE}")
        print(f"üíæ Cache S√ºreleri: Bakiye={cls.CACHE_DURATION_BALANCE}s, Pozisyon={cls.CACHE_DURATION_POSITION}s")
        print(f"üåê WebSocket: Ping={cls.WEBSOCKET_PING_INTERVAL}s, Timeout={cls.WEBSOCKET_PING_TIMEOUT}s")
        print("=" * 60)
        print("üí° 15m + EMA(9,21) kombinasyonu crypto futures i√ßin optimize edilmi≈ütir")
        print("üéØ Risk/Reward oranƒ± 1:1.5 - optimal kar/zarar dengesi")
        print("=" * 60)

settings = Settings()

# Ba≈ülangƒ±√ßta ayarlarƒ± doƒürula
if __name__ == "__main__":
    settings.validate_settings()
    settings.print_settings()
